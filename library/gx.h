//
// Created by Oshikuru on 15.9.2019..
//

#ifndef GX_GX_H
#define GX_GX_H

#include "core.h"
#include "../gene/feature.h"
#include "../decoder/decoder_info.h"
#include "../crossover/crossover_info.h"
#include "../mutation/mutation_info.h"
#include "../algorithm/algorithm_type.h"

///////////////////////////////////////////////////////////////////////////////////////////////
// Library initialization /////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

extern "C" GXLIB_API int gx_init(int seed);

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////
// Binary genetic algorithm ///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

extern "C" GXLIB_API int
gx_bga_create(gx::algorithm_type type, gx::decoder_info decoder_info, gx::crossover_info *crossover_info,
              size_t crossover_info_size, gx::mutation_info *mutation_info,
              size_t mutation_info_size, void* args, void **algorithm);

extern "C" GXLIB_API int gx_bga_destroy(void *algorithm);

extern "C" GXLIB_API int gx_bga_init_population(void *algorithm, size_t population_size);

extern "C" GXLIB_API int gx_bga_run(void *algorithm, size_t epochs);

extern "C" GXLIB_API int gx_bga_get_best(void *algorithm, size_t* features_size, gx::feature *best);

extern "C" GXLIB_API int gx_bga_get_best_fitness(void *algorithm, float *best);

extern "C" GXLIB_API int gx_bga_get_epoch(void *algorithm, size_t *epoch);

extern "C" GXLIB_API int gx_bga_extract_plot_data(void *algorithm, size_t* data_size, float *data);

///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

#endif //GX_GX_H